1- Antes de começar a realizar a aplicação de fato, devo começar a criar os teste e tudo relacionado a aplicação mesmo que seja algo bem simples.

2- A pirâmide dos teste se divide em unidade, serviço e interface
Os testes de unidade se encontram na base da pirâmide pois ele é mais rápido e mais barato que os outros tipos de testes pois os testes desenvolvidos pelo desenvolvedor está sendo constantimente sendo observado por ele mesmo.
Os testes de serviço/integração são os testes onde os componentes são testados juntos. É como se fosse um conjunto de pequenos testes de unidade em um só.
Os testes de interface se encontram no topo da pirâmide pois são mais lentos e mais caros para serem implementados

3- Aqui foi usado recoil do react para lidar com estados da aplicação de forma global. Atom usado na pasta state é uma pequena parcela do estado e ele é usado no hook que eu criei na pasta hooks para lidar com a inserção de participantes.
Primeiro deve ser criado o atom e depois o hook.

4- O react testing library não testa implementação, ele testa comportamentos

5- Como o projeto utiliza recoil para fazer o tratamento de estados, eu tenho que passar esse recoil também para o ambiente de testes para esses estados serem reconhecidos. Por exemplo, o primeiro teste do formulário foi feito sem o RecoilRoot pois não havia nenhuma estado criado por mim. Após eu criar o estado de erro para tratar as mensagens de erro e colocar dentro do formulário eu tive que utilizar RecoilRoot no ambiente de testes porque o evento de enviar disparado quando o botão é clicado faz o uso do estado erroState caso tenho dois usuários iguais.

6- TDD consiste em começar os testes tentando fazer com que ele dê erro de propósito e ajustá-lo conforme o desenvolvimento. Por exemplo o caso de usuário duplicados, eu por padrão considero que já foi inserido dois usuários iguais e tento criar um código para tentar consertar isso. No arquivo de testes já são colocados dois usuários e eu já espero que apareça a mensagem de erro, e assim eu desenvolvo a função de alert na tela. O teste somente passará se eu conseguir renderizar a mensagem de erro na tela. O arquivo de teste basicamente é uma comparação com seu arquivo "real" utilizado no desenvolvimento. No teste eu crio um alert e no arquivo "real" eu também tenho que criar um alert.
COMPARAR O TESTE DE ERRO COM A TAG PARÁGRAFO QUE RENDERIZA  O ERRO.

7- Aparentemente todas as bibliotecas de testes são bem parecidas, como o Rspec do Ruby e o Jest do Javascript. Ambas utilizam o método describe, no entanto com contextos diferentes.
No Jest o describe serve para reunir diversos teste em um único conjunto de teste e o nome desse conjunto aparece em cima de todos os casos de teste lá no terminal. Já no Rspec o describe serve para testar a função individualmente e recebe como nome o nome da própria função do programa.

8- Posso usar recoil para criar estados de erro personalizados como o erro 404 do site do STI da UFF. Criar o atom do tipo elemento JSX e depois um hook para renderizar esse elemento.

9- Não entendi ao certo o por que ter de utilizar jest.Mock nos testes do arquivo de lista de participantes e nos testes do formulário não utilizar jest.Mock. Em ambos eu utilizo o mesmo hook que eu criei. Sem o mock o estado não consegue ser atualizado. Mock foi utilizado para não usar o próprio useListaParticipantes e sim uma função fake baseada nesse hook.
Mock quer dizer imitar ou falsificar

10- Usar jest.Mock foi bem interessante porque eu uso o estado que eu criei dentro do próprio arquivo de testes. Eu poderia ter usado algo parecido quando fui fazer o desafio do STI ao invés de ter importado a própria classe contendo os dados do aluno.

11- O teste de Snapshot é utilizado para comparar a renderização de um componente com outro, geralmente utilizado em páginas já com os componentes da página. Aqui eu tiro uma foto da página de configuração e espero que ele esteja sempre de um mesmo jeito, se eu fizer alguma atualização dentro da página de configuração ou alguma atualização dentro dos componentes o teste retornará erro e pedirá para eu atualizar o Snapshot. Uma pasta Snapshot é criada contendo a "foto" do HTML.