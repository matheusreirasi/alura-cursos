1- Antes de começar a realizar a aplicação de fato, devo começar a criar os teste e tudo relacionado a aplicação mesmo que seja algo bem simples.

2- A pirâmide dos teste se divide em unidade, serviço e interface
Os testes de unidade se encontram na base da pirâmide pois ele é mais rápido e mais barato que os outros tipos de testes pois os testes desenvolvidos pelo desenvolvedor está sendo constantimente sendo observado por ele mesmo.
Os testes de serviço/integração são os testes onde os componentes são testados juntos. É como se fosse um conjunto de pequenos testes de unidade em um só.
Os testes de interface se encontram no topo da pirâmide pois são mais lentos e mais caros para serem implementados

3- Aqui foi usado recoil do react para lidar com estados da aplicação de forma global. Atom usado na pasta state é uma pequena parcela do estado e ele é usado no hook que eu criei na pasta hooks para lidar com a inserção de participantes. 

4- O react testing library não testa implementação, ele testa comportamentos

5- Como o projeto utiliza recoil para fazer o tratamento de estados, eu tenho que passar esse recoil também para o ambiente de testes para esses estados serem reconhecidos. Por exemplo, o primeiro teste do formulário foi feito sendo o RecoilRoot pois não havia nenhuma estado criado por mim. Após eu criar o estado de erro e colocar dentro do formulário eu tive que utilizar RecoilRoot no ambiente de testes porque o evento de enviar disparado quando o botão é clicado faz o uso do estado erroState caso tenho dois usuários iguais.

6- TDD consiste em começar os testes tentando fazer com que ele dê erro de propósito e ajustá-lo conforme o desenvolvimento. Por exemplo o caso de usuário duplicados, eu por padrão considero que já foi inserido dois usuários iguais e tento criar um código para tentar consertar isso. No arquivo de testes já são colocados dois usuários e eu já espero que apareça a mensagem de erro, e assim eu desenvolvo a função de alert na tela. O teste somente passará se eu conseguir renderizar a mensagem de erro na tela. O arquivo de teste basicamente é uma comparação com seu arquivo "real" utilizado no desenvolvimento. No teste eu crio um alert e no arquivo "real" eu também tenho que criar um alert.
COMPARAR O TESTE DE ERRO COM A TAG PARÁGRAFO QUE RENDERIZA  O ERRO.