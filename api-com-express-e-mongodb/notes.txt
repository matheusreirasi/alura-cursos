Pacotes básicos para começar o servidor:
    1- Nodemon para poder ver algo no navegador sempre que for alterado algo no código. Instalada como dependência de desenvolvimento, ou seja, não vai para a produção
    2- Configuração do script do package para rodar o nodemon quando iniciar o server. "dev": "nodemon server.js"
    3- const http = require("http") para poder criar o server. Como eu uso o express, eu realmente não preciso disso, somente crio as requisições no arquivo app e exporto o objeto app para o server.

1- O servidor do mongodb não funciona no Firefox nem no insomnia, somente no Chrome. (FUNCIONA SIM)

2- Para a conexão funcionar corretamente com o banco de dados tenho que colocar o nome do database no final do link de conexão que o mongodb entrega, no caso desse projeto é livraria-alura. Olhar o arquivo db.js

3- A ordem de hierarquia no MongoDb é Empresa > Projeto > Cluster > Banco de dados > Collections. Esses são os passos para a criação dos bancos de dados e por último é a tabela que há no banco de dados. Antes de criar um banco de dados eu tenho que criar um cluster que é uma máquina virtual localizado em algum servidor, AWS, Azure ou Google.
No caso desse curso a ordem é Alura > API-Node-Express > Alura > livraria-alura > livros

4- A partir da versão 4.2 do MongoDb é preciso habilitar o TLS/SSL. Para isso tem que passar para o TLS um certificado encriptado. É possível pegar um certificado gratuitamente assinado pelo Let's Encrypt usando Certbot ETF, no entanto eles são auto-assinados. Esses tipos de certificados conseguem encriptar comunicação mas não proveem validação da identidade do servidor.

5- É uma prática comum quando criar um modelo de arquivos para o banco de dados criar esse arquivo com o nome que ele irá representar no database com sua terminação no singular. Olhar a pasta models.

6- Uma breve explicação sobre MongoDb.
Ele é orientado a documentos e é armazenado em documentos BSON(Binary Json).
Na construção do JSON ou BSON, precisamos entender alguns conceitos importantes sobre sua estrutura de dados. O primeiro conceito é a definição de Entidades e Atributos.
Imagina uma plataforma de entrega de refeições, ela usa um aplicativo para conectar clientes com restaurantes e entregadores, cada público desses serão usuários que precisarão ter um cadastro no banco de dados da plataforma. Podemos dizer que os clientes, restaurantes e entregadores, são as Entidades.
Cada entidade terá um cadastro a ser preenchido com dados importantes. Mas quais dados são importantes para solicitarmos? Esses dados requeridos, chamamos de Atributos.
https://cursos.alura.com.br/course/nodejs-api-rest-express-mongodb/task/103638

7- A organização dos arquivos está parecida com a Oppia Foundation onde contém uma pasta controllers que possui classes com funções para realizar algo e encaminha essa função para algum lugar que no caso do curso é a pasta routes. Nessa pasta contém um arquivo da rota de livro com os comandos HTTP, seu caminho da url e a função recebida do controller e outro arquivo index que recebe todas as rotas criadas e a envia para o app.js onde lá ele recebe as funções do express.
Dentro da pasta routes contém os comandos HTTP.

8- Cadastrar algo no mongoose (usando o método POST) gera um parâmetro no banco de dados relacionado a versão daquele documento, acho que isso ocorre também quando eu atualizar o documento, e quando isso ocorrer o número da versão deve mudar também. É possível desativar

9- Na variável livros do arquivo livrosController.js já aparece os comandos do MongoDb pois eu crio essa const livros na pasta models e ele já recebe uma função do mongoose que o faz receber todas as funções e utilizá-las em qualquer arquivo que eu o importá-lo.

10- Quando usar associação entre documentos do MongoDb como é feito no model do livro eu tenho que colocar ao lado do tipo dele a qual documento aquela determinada entidade(no caso é o autor) faz referência(que no caso é a tabela autores). Além disso, no controller do livro, eu tenho que colocar após o comando find o comando populate() e dentro uma string dizendo qual parte eu quero que seja populada(que no caso eu quero que apareça na entidade autor os dados do autor que foi cadastrado no documento autores) e depois o comando exec() com a arrow function já criada.
Feito tudo isso eu uso o método PUT/POST para atualizar/cadastrar o nome do autor na url de livros, passando o id do livro que eu quero inserir o autor e na resposta em JSON que eu passo para o MongoDb eu coloco no nome do autor(como eu to em livros eu tenho que passar como key autor e não nome como é feito na tabela de autores) e passo o ID como value ao invés de passar o nome do autor. A resposta irá retornar um objeto no campo do autor e dentro terá todas aquelas informações do autor que escreveu o livro e que já tá cadastrado na tabela de autores.
Se eu não colocar o populate no controller será retornado no campo de autor(isso usando a url de livros) o número do id que eu passei no momento que tava atualizando com o método PUT. Quando usar o método POST será que eu tenho que passar no JSON um objeto dentro do campo autor?? Minha resposta é provavelmente não, e é aqui onde está o problema que eu passei com a NGcash em que eu não conseguia gerar um id assim que era criada uma conta, eu tinha que primeiro ter um usuário e depois com o ID desse usuário fazer a relação com a conta. A mesma coisa acontece aqui, primeiro tenho que ter um autor pré-cadastrado e colocar seu ID no campo de autor do livro. Na vida real não é assim que acontece, tudo deveria ser gerado no momento do cadastro.

11- Quando for criar as rotas no node tem que colocar primeiro as rotas mais específicas (como aquelas que contém algum critério de busca) e depois as menos específicas. Se eu colocar uma rota de filtro abaixo de uma rota que busca um ID irá me retornar erro pois o node irá pensar que eu quero filtrar algo a partir do ID que está em cima. Sempre colocar rotas de filtro antes de rotas que buscam ID. No Postman da aula aparece os parâmetros da busca (chave/valor) editara: Rocco por exemplo
https://cursos.alura.com.br/course/nodejs-api-rest-express-mongodb/task/106304
https://www.alura.com.br/artigos/rest-principios-e-boas-praticas

12- Para usar o EsLint para reparar os códigos:
    npx eslint ./src --fix

13- No primeiro curso foi utilizado callback nos controllers para responder requisições e também para tratamento de erros
    static listarLivros = (req, res) => {
		livros.find()
			.populate("autor")
			.exec((err, livros) =>{
				res.status(200).json(livros);
			});
	};
Na continuação da segunda parte do curso foi utilizado async/await, no entanto para haver tratamento de erros e acertos da requisição/resposta tem que usar try/catch
    
14- Explicando mais ainda o populate() citado no tópico 10, alguns livros possuem um autor cadastrado como o Harry Potter e outros não, como Jogos Vorazes. Ao usar a função populate() eu consigo preencher campos que fazem parte da informação do livro mas não necessariamente precisam estar ali. Por exemplo, o model de Livro contém uma chave chamada autor que aponta para o model Autor, assim a chave autor no model de Livro é um objeto contendo informações do autor daquele livro. Ao usar populate() num livro como Harry Potter eu consigo popular o campo autor com o nome do autor("nome" é uma chave no model Autor) ao invés de ter somente a chave do ObjectId (da forma como ele é salvo no model de Livro).
Se eu não colocar populate() na função listarLivroId no livrosController por exemplo, eu terei como retorno algo parecido com isso:
	{
	"_id": "63d4432cab46515e33b84468",
	"titulo": "Harry Potter e a pedra filosofal",
	"autor": "63d466b458daa8fd2ab8a8df",
	"editora": "Rocco",
	"__v": 0,
	"numeroPaginas": 208
	}
Com o populate() o retorno é isso:
	{
	"_id": "63d4432cab46515e33b84468",
	"titulo": "Harry Potter e a pedra filosofal",
	"autor": {
		"_id": "63d466b458daa8fd2ab8a8df",
		"nome": "J. K. Rowling"
	},
	"editora": "Rocco",
	"__v": 0,
	"numeroPaginas": 208
	}

15- No middleware ErrorHandler é necessário saber um pouco a mais de MongoDb e mongoose para ter aquele retorno no caso de estar faltando algum valor obrigatório do banco de dados.

16- Object.values utilizado no middleware ErrorHandler é um método Javascript que serve para iterar por valores do objeto passado dentro da função. Ele retorna um array contendo os valores.

17- A mensagem personalizada que o usuário recebe ao preencher algum campo faltando, como nome do autor por exemplo, só é possível devido a mensagem inserida no model do Autor. Isso é possível para qualquer model e eu fiz isso para Livro também, se todos os campos (como titulo, autor ou editora por exemplo) estiverem vazios será retornada todas as mensagens personalizadas dizendo o que está faltando. 

18- A pasta de errors cria os tipos de erros e os middlewares enviam os erros para o servidor. Desse jeito eu consigo usar o erro 404 ou 301 para diversos middleware que eu criar.

19- O erro ValidationError é uma extensão de BadRequest pois possui o mesmo código status (400) e também são retornos do mongoose.Error.

20- Quando é criada uma classe (como é feito nos arquivos da pasta errors) deve-se colocar um constructor, quando esse constructor tem algum parâmetro dentro quer dizer que no outro local que essa classe for usada deverá ter algum valor dentro dessa classe. Isso ocorre com o erro ValidationError que recebe uma parâmetro no arquivo src/middleware/ErrorHandler.js, porém não ocorre essa necessidade de passar um parâmetro na classe BadRequest usada nesse mesmo arquivo.

21- Antes a classe ValidationError retornava o mesmo erro que BadRequest, isso ocorria porque eu inseria embutido dentro do super da classe BadRequest a mensagem de erro de parâmetro incorreto. Porém classes tem que ser usadas da forma mais abstrata possível e quando eu passo para o objeto super() a mensagem de erro diretamente, outras classes que fizerem uso de classe (no caso ValidationError que é uma extensão de BadRequest) receberão os mesmos valores da classe "mãe". A solução foi criar a mensagem fora do objeto super().

22- Os métodos do MongoDb retornam null caso suas condições não são estabelecidas.

23- No model é possível inserir outros validadores como máximo, mínimo ou mensagens. Além disso é possível retornar mensagens com valores dinâmicos (OLHAR O MODEL DE LIVRO).

24- Não entendi ao certo por que colocar validate dentro do set do mongoose no arquivo src/models/ValidadorGlobal faz qualquer campo de qualquer model entender que está falando daquele exato campo e não o campo validate (já que ele que tá escrito dentro do set do mongoose no arquivo)

25- No arquivo src/models/ValidadorGlobal foi utilizado uma função para retornar qual campo que o usuário inseriu está em branco. Antes eu tinha feito sem passar o objeto path dentro do parâmetro da função; tinha colocado somente o path sem os colchetes e tive como retorno no Insomnia o seguinte:
	"O campo [object Object] foi fornecido em branco"
Esse retorno [object Object] acontece com frequência no Javascript, tentarei colocar os valores como objeto a partir de agora quando receber essa resposta.

26- O workflow para entender a validação global é o seguinte:
	model de Autor >> arquivo ValidadorGlobal.js >> index.js do arquivo de models >> controller de Autores.
Primeiro vem o model de Autor antes de ValidadorGlobal pois começamos pelos valores que o banco de dados vai receber para podermos entender todo o sentido do projeto. Se começar pelo ValidadorGlobal não irei saber o que quero validar e nem o por que.

27- Eu usei o middleware de paginar somente em autores para ver a diferença e saber sua lógica, no entanto um middleware como esse deve ser usado em qualquer rota que seja necessário criar uma paginação.