Pacotes básicos para começar o servidor:
    1- Nodemon para poder ver algo no navegador sempre que for alterado algo no código. Instalada como dependência de desenvolvimento, ou seja, não vai para a produção
    2- Configuração do script do package para rodar o nodemon quando iniciar o server. "dev": "nodemon server.js"
    3- const http = require("http") para poder criar o server. Como eu uso o express, eu realmente não preciso disso, somente crio as requisições no arquivo app e exporto o objeto app para o server.

1- O servidor do mongodb não funciona no Firefox nem no insomnia, somente no Chrome.

2- Para a conexão funcionar corretamente com o banco de dados tenho que colocar o nome do database no final do link de conexão que o mongodb entrega, no caso desse projeto é livraria-alura. Olhar o arquivo db.js

3- A ordem de hierarquia no MongoDb é Empresa > Projeto > Cluster > Banco de dados > Collections. Esses são os passos para a criação dos bancos de dados e por último é a tabela que há no banco de dados. Antes de criar um banco de dados eu tenho que criar um cluster que é uma máquina virtual localizado em algum servidor, AWS, Azure ou Google.
No caso desse curso a ordem é Alura > API-Node-Express > Alura > livraria-alura > livros

4- A partir da versão 4.2 do MongoDb é preciso habilitar o TLS/SSL. Para isso tem que passar para o TLS um certificado encriptado. É possível pegar um certificado gratuitamente assinado pelo Let's Encrypt usando Certbot ETF, no entanto eles são auto-assinados. Esses tipos de certificados conseguem encriptar comunicação mas não proveem validação da identidade do servidor.

5- É uma prática comum quando criar um modelo de arquivos para o banco de dados criar esse arquivo com o nome que ele irá representar no database com sua terminação no singular. Olhar a pasta models.

6- Uma breve explicação sobre MongoDb.
Ele é orientado a documentos e é armazenado em documentos BSON(Binary Json).
Na construção do JSON ou BSON, precisamos entender alguns conceitos importantes sobre sua estrutura de dados. O primeiro conceito é a definição de Entidades e Atributos.
Imagina uma plataforma de entrega de refeições, ela usa um aplicativo para conectar clientes com restaurantes e entregadores, cada público desses serão usuários que precisarão ter um cadastro no banco de dados da plataforma. Podemos dizer que os clientes, restaurantes e entregadores, são as Entidades.
Cada entidade terá um cadastro a ser preenchido com dados importantes. Mas quais dados são importantes para solicitarmos? Esses dados requeridos, chamamos de Atributos.
https://cursos.alura.com.br/course/nodejs-api-rest-express-mongodb/task/103638

7- A organização dos arquivos está parecida com a Oppia Foundation onde contém uma pasta controllers que possui classes com funções para realizar algo e encaminha essa função para algum lugar que no caso do curso é a pasta routes. Nessa pasta contém um arquivo da rota de livro com os comandos HTTP, seu caminho da url e a função recebida do controller e outro arquivo index que recebe todas as rotas criadas e a envia para o app.js onde lá ele recebe as funções do express.
Dentro da pasta routes contém os comandos HTTP.

8- Cadastrar algo no mongoose (usando o método POST) gera um parâmetro no banco de dados relacionado a versão daquele documento, acho que isso ocorre também quando eu atualizar o documento, e quando isso ocorrer o número da versão deve mudar também. É possível desativar

9- Na variável livros do arquivo livrosController.js já aparece os comandos do MongoDb pois eu crio essa const livros na pasta models e ele já recebe uma função do mongoose que o faz receber todas as funções e utilizá-las em qualquer arquivo que eu o importá-lo.

10- Quando usar associação entre documentos do MongoDb como é feito no model do livro eu tenho que colocar ao lado do tipo dele a qual documento aquela determinada entidade(no caso é o autor) faz referência(que no caso é a tabela autores). Além disso, no controller do livro, eu tenho que colocar após o comando find o comando populate() e dentro uma string dizendo qual parte eu quero que seja populada(que no caso eu quero que apareça na entidade autor os dados do autor que foi cadastrado no documento autores) e depois o comando exec() com a arrow function já criada.
Feito tudo isso eu uso o método PUT/POST para atualizar/cadastrar o nome do autor na url de livros, passando o id do livro que eu quero inserir o autor e na resposta em JSON que eu passo para o MongoDb eu coloco no nome do autor(como eu to em livros eu tenho que passar como key autor e não nome como é feito na tabela de autores) e passo o ID como value ao invés de passar o nome do autor. A resposta irá retornar um objeto no campo do autor e dentro terá todas aquelas informações do autor que escreveu o livro e que já tá cadastrado na tabela de autores.
Se eu não colocar o populate no controller será retornado no campo de autor(isso usando a url de livros) o número do id que eu passei no momento que tava atualizando com o método PUT. Quando usar o método POST será que eu tenho que passar no JSON um objeto dentro do campo autor?? Minha resposta é provavelmente não, e é aqui onde está o problema que eu passei com a NGcash em que eu não conseguia gerar um id assim que era criada uma conta, eu tinha que primeiro ter um usuário e depois com o ID desse usuário fazer a relação com a conta. A mesma coisa acontece aqui, primeiro tenho que ter um autor pré-cadastrado e colocar seu ID no campo de autor do livro. Na vida real não é assim que acontece, tudo deveria ser gerado no momento do cadastro.

11- Quando for criar as rotas no node tem que colocar primeiro as rotas mais específicas (como aquelas que contém algum critério de busca) e depois as menos específicas. Se eu colocar uma rota de filtro abaixo de uma rota que busca um ID irá me retornar erro pois o node irá pensar que eu quero filtrar algo a partir do ID que está em cima. Sempre colocar rotas de filtro antes de rotas que buscam ID. No Postman da aula aparece os parâmetros da busca (chave/valor) editara: Rocco por exemplo
https://cursos.alura.com.br/course/nodejs-api-rest-express-mongodb/task/106304
https://www.alura.com.br/artigos/rest-principios-e-boas-praticas